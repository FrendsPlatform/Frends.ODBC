using Frends.ODBC.ExecuteQuery.Definitions;
using Newtonsoft.Json.Linq;
using System;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.Odbc;
using System.Linq;
using System.Reflection;
using System.Runtime.Loader;
using System.Threading;
using System.Threading.Tasks;

namespace Frends.ODBC.ExecuteQuery;

/// <summary>
/// ODBC Task.
/// </summary>
public class ODBC
{
    /// Mem cleanup.
    static ODBC()
    {
        var currentAssembly = Assembly.GetExecutingAssembly();
        var currentContext = AssemblyLoadContext.GetLoadContext(currentAssembly);
        if (currentContext != null)
            currentContext.Unloading += OnPluginUnloadingRequested;
    }

    /// <summary>
    /// Convert JSON string to JToken.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.ODBC.ExecuteQuery)
    /// </summary>
    /// <param name="input">Input parameters</param>
    /// <param name="options">Optional parameters.</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this Task.</param>
    /// <returns>Object { bool Success, int RecordsAffected, string ErrorMessage, dynamic Data }</returns>
    public static async Task<Result> ExecuteQuery([PropertyTab] Input input, [PropertyTab] Options options, CancellationToken cancellationToken)
    {
        Result result;

        try
        {
            using var connection = new OdbcConnection(input.ConnectionString);
            await connection.OpenAsync(cancellationToken);

            using var command = connection.CreateCommand();
            command.CommandTimeout = options.CommandTimeoutSeconds;
            command.CommandText = input.Query;
            command.CommandType = CommandType.Text;

            if (input.ParametersInOrder != null)
                command.Parameters.AddRange(input.ParametersInOrder.Select(x => new OdbcParameter { Value = x.Value }).ToArray());

            result = await ExecuteHandler(input, options, command, cancellationToken);
            return result;
        }
        catch (Exception ex)
        {
            var eMsg = $"ExecuteQuery exception: {ex}.";

            if (options.ThrowErrorOnFailure)
                throw new Exception(eMsg);

            return new Result(false, 0, eMsg, null);
        }
        finally
        {
            OdbcConnection.ReleaseObjectPool();
        }
    }

    private static async Task<Result> ExecuteHandler(Input input, Options options, OdbcCommand command, CancellationToken cancellationToken)
    {
        Result result;
        DbDataReader dbDataReader;
        object dataObject;
        var table = new DataTable();

        switch (input.ExecuteType)
        {
            case ExecuteTypes.Auto:
                if (input.Query.ToLower().StartsWith("select"))
                {
                    dbDataReader = await command.ExecuteReaderAsync(cancellationToken);
                    table.Load(dbDataReader);
                    result = new Result(true, dbDataReader.RecordsAffected, null, JToken.FromObject(table));
                    await dbDataReader.CloseAsync();
                    await dbDataReader.DisposeAsync();
                    break;
                }
                dataObject = await command.ExecuteNonQueryAsync(cancellationToken).ConfigureAwait(false);
                result = new Result(true, (int)dataObject, null, JToken.FromObject(new { AffectedRows = dataObject }));
                break;
            case ExecuteTypes.NonQuery:
                dataObject = await command.ExecuteNonQueryAsync(cancellationToken).ConfigureAwait(false);
                result = new Result(true, (int)dataObject, null, JToken.FromObject(new { AffectedRows = dataObject }));
                break;
            case ExecuteTypes.Scalar:
                dataObject = await command.ExecuteScalarAsync(cancellationToken).ConfigureAwait(false);
                result = new Result(true, 1, null, JToken.FromObject(new { Value = dataObject }));
                break;
            case ExecuteTypes.ExecuteReader:
                dbDataReader = (OdbcDataReader)await command.ExecuteReaderAsync(cancellationToken).ConfigureAwait(false);
                table.Load(dbDataReader);
                result = new Result(true, dbDataReader.RecordsAffected, null, JToken.FromObject(table));
                await dbDataReader.CloseAsync();
                await dbDataReader.DisposeAsync();
                break;
            default:
                throw new NotSupportedException();
        }

        return result;
    }

    private static void OnPluginUnloadingRequested(AssemblyLoadContext obj)
    {
        obj.Unloading -= OnPluginUnloadingRequested;
    }
}